import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

import java.text.SimpleDateFormat

buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${version_springBoot}"
        classpath "org.springframework:springloaded:${version_springLoaded}"
        classpath "com.sourcemuse.gradle.plugin:gradle-mongo-plugin:${version_mongo_plugin}"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:${version_asciidoctor_plugin}"
        classpath "org.ajoberstar:gradle-git:${version_gradle_git}"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${version_bintray_plugin}"
    }
}

apply plugin: 'spring-boot'
apply plugin: 'mongo'
apply plugin: 'war'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'org.ajoberstar.github-pages'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.bmuschko.docker-remote-api'

dependencies {
    compile(
            project(":packrat"),
            "org.springframework.boot:spring-boot-starter-actuator:${version_springBoot}",
            "org.springframework.boot:spring-boot-starter-hateoas:${version_springBoot}"
    )

    compileOnly(
            "org.springframework.boot:spring-boot-starter-tomcat:${version_springBoot}"
    )

    testCompile(
            "org.springframework.boot:spring-boot-starter-test:${version_springBoot}",
            "org.springframework.restdocs:spring-restdocs-mockmvc:${version_springRestDocs}",
            "org.springframework.restdocs:spring-restdocs-core:${version_springRestDocs}",
            "com.jayway.jsonpath:json-path:${version_jsonPath}",
            "junit:junit:${version_junit}"
    )
}

task integrationTest(type: Test) {
    runWithMongoDb = true // activates mongo plugin to start embedded MongoDB
    useJUnit {
        includeCategories project.MongoIntegrationTests
    }
}

bootRepackage {
    mainClass = 'com.github.reflectoring.Quartermaster'
    executable = true
}

bootRun {
    // default application configuration for running application via bootRun in development mode
    // (in production, these properties are defined in application.properties)
    jvmArgs '-Xdebug',
            '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9009'
}

task cleanWebappDir(type: Delete) {
    delete 'src/main/webapp'
}

task copyClient(type: Copy) {
    from '../dashy/dist'
    into 'src/main/webapp'
}

// clean should also clean webapp dir
clean.dependsOn cleanWebappDir

// clean old webapp first
copyClient.dependsOn cleanWebappDir

// der client muss kopiert werden, bevor die quartermaster WAR gebaut wird
processResources.mustRunAfter copyClient

build.dependsOn copyClient

docker {
    registryCredentials {
        email = System.env.DOCKER_EMAIL
        username = System.env.DOCKER_USER
        password = System.env.DOCKER_PASS
    }

    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp", "https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)

        }
    } else {
        url = 'unix:///var/run/docker.sock'
    }
}

task buildImage(type: DockerBuildImage, dependsOn: build) {
    def dockerDir = file('build/docker')
    dockerDir.mkdirs()

    doFirst {
        copy {
            from("${project.buildDir}/libs/") {
                rename "${war.baseName}-.*\\.war", "${war.baseName}.war"
            }
            into 'build/docker'
            exclude '*.original'
        }
        copy {
            from "${projectDir}/src/main/docker"
            into 'build/docker'
            include 'Dockerfile'
            include 'application.properties'
        }
    }

    inputDir = dockerDir
    tag = "${project.dockerGroup}/${war.baseName}"
}



task tagImage() {
    mustRunAfter buildImage

    dependsOn "tagPatchVersion"
    dependsOn "tagMinorVersion"
    dependsOn "tagMajorVersion"
}

task tagPatchVersion(type: DockerTagImage) {
    targetImageId { project.dockerGroup + '/' + war.baseName + ':latest' }
    repository = "${project.dockerGroup}/${war.baseName}"
    tag = baseVersion
}

task tagMinorVersion(type: DockerTagImage) {
    targetImageId { project.dockerGroup + '/' + war.baseName + ':latest' }
    repository = "${project.dockerGroup}/${war.baseName}"
    tag = "${project.majorVersion}.${project.minorVersion}"
}

task tagMajorVersion(type: DockerTagImage) {
    targetImageId { project.dockerGroup + '/' + war.baseName + ':latest' }
    repository = "${project.dockerGroup}/${war.baseName}"
    tag = project.majorVersion
}

task pushImage(type: DockerPushImage) {
    mustRunAfter tagImage

    imageName = "${project.dockerGroup}/${war.baseName}"
}

ext {
    snippetsDir = file('build/generated-snippets')
}

asciidoctor {
    attributes 'snippets': snippetsDir,
            'version': version,
            'date': new SimpleDateFormat("yyyy-MM-dd").format(new Date())
    inputs.dir snippetsDir
    dependsOn test
    sourceDir 'src/main/asciidoc'
    outputDir 'build/doc/restapi'
}

githubPages {
    repoUri = 'git@github.com:reflectoring/infiniboard.git'
    targetBranch = 'gh-pages'
    pages {
        from 'build/doc/restapi/html5'
        into "${baseVersion}/docs/restapi"
    }
}

publishGhPages.dependsOn asciidoctor

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    filesSpec {
        into version
        from('build/libs') {
            include "${project.name}-${project.version}.war"
        }
    }

    publish = true

    pkg {
        userOrg = 'reflectoring'
        repo = 'infiniboard'
        name = 'releases'
        desc = 'official infiniboard release repository'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/reflectoring/infiniboard.git'
        websiteUrl = 'http://reflectoring.github.io/infiniboard/'

        publicDownloadNumbers = true

        version {
            name = project.version
            released = new Date()
        }
    }
}

bintrayUpload.dependsOn build
