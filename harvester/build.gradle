import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${version_springBoot}"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${version_bintray_plugin}"
    }

}

apply plugin: 'spring-boot'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.bmuschko.docker-remote-api'

dependencies {
    compile(
            project(':packrat'),
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-actuator',
            "org.quartz-scheduler:quartz:${version_quartz}",
            "org.apache.httpcomponents:httpclient:${version_httpclient}",
    )

    testCompile(
            'org.springframework.boot:spring-boot-starter-test'
    )
}

bootRepackage {
    mainClass = 'com.github.reflectoring.infiniboard.harvester.HarvesterApplication'
    executable = true
}

docker {
    registryCredentials {
        email = System.env.DOCKER_EMAIL
        username = System.env.DOCKER_USER
        password = System.env.DOCKER_PASS
    }

    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp", "https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)

        }
    } else {
        url = 'unix:///var/run/docker.sock'
    }
}

task buildImage(type: DockerBuildImage, dependsOn: build) {
    def dockerDir = file('build/docker')
    dockerDir.mkdirs()

    doFirst {
        copy {
            from("${project.buildDir}/libs/") {
                rename "${jar.baseName}-.*\\.jar", "${jar.baseName}.jar"
            }
            into 'build/docker'
            exclude '*.original'
        }
        copy {
            from "${projectDir}/src/main/docker"
            into 'build/docker'
            include 'Dockerfile'
            include 'application.properties'
        }
    }

    inputDir = dockerDir
    tag = "${project.dockerGroup}/${jar.baseName}"
}



task tagImage() {
    mustRunAfter buildImage

    dependsOn "tagPatchVersion"
    dependsOn "tagMinorVersion"
    dependsOn "tagMajorVersion"
}

task tagPatchVersion(type: DockerTagImage) {
    targetImageId { project.dockerGroup + '/' + jar.baseName + ':latest' }
    repository = "${project.dockerGroup}/${jar.baseName}"
    tag = baseVersion
}

task tagMinorVersion(type: DockerTagImage) {
    targetImageId { project.dockerGroup + '/' + jar.baseName + ':latest' }
    repository = "${project.dockerGroup}/${jar.baseName}"
    tag = "${project.majorVersion}.${project.minorVersion}"
}

task tagMajorVersion(type: DockerTagImage) {
    targetImageId { project.dockerGroup + '/' + jar.baseName + ':latest' }
    repository = "${project.dockerGroup}/${jar.baseName}"
    tag = project.majorVersion
}

task pushImage(type: DockerPushImage) {
    mustRunAfter tagImage

    imageName = "${project.dockerGroup}/${jar.baseName}"
}


bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    filesSpec {
        into version
        from('build/libs') {
            include "${project.name}-${project.version}.jar"
        }
    }

    publish = true

    pkg {
        userOrg = 'reflectoring'
        repo = 'infiniboard'
        name = 'releases'
        desc = 'official infiniboard release repository'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/reflectoring/infiniboard.git'
        websiteUrl = 'http://reflectoring.github.io/infiniboard/'

        publicDownloadNumbers = true

        version {
            name = project.version
            released = new Date()
        }
    }
}

bintrayUpload.dependsOn build
